{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Table, Tag, Space } from \"antd\";\nvar Column = Table.Column,\n    ColumnGroup = Table.ColumnGroup;\n\nvar AllDomain = function AllDomain() {\n  _s();\n\n  var _useState = useState([]),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(false),\n      hasError = _useState2[0],\n      setErrors = _useState2[1];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:5000/api/v1/domain/\");\n\n              case 2:\n                res = _context.sent;\n                res.json().then(function (res) {\n                  return setData(res);\n                })[\"catch\"](function (err) {\n                  return setErrors(err);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      overflow: \"scroll\"\n    }\n  }, __jsx(\"span\", null, JSON.stringify(data)));\n};\n\n_s(AllDomain, \"Exgb3vS/C/RLK5De3ltA3WPoas8=\");\n\n_c = AllDomain;\nexport default AllDomain;\n{\n  /* <Column\r\n          title=\"Tags\"\r\n          dataIndex=\"tags\"\r\n          key=\"tags\"\r\n          render={(tags) => (\r\n            <>\r\n              {tags.map((tag) => {\r\n                let color = tag.length > 5 ? \"geekblue\" : \"purple\";\r\n                if (tag === \"loser\") {\r\n                  color = \"blue\";\r\n                }\r\n                return (\r\n                  <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        /> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AllDomain\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/webD course 2020/internship/avanzar/1. Domain Handler/wieldy-v-2.3.0/next-js-jwt-stater-kit/routes/AllDomain/index.js"],"names":["React","useEffect","useState","axios","Table","Tag","Space","Column","ColumnGroup","AllDomain","data","setData","hasError","setErrors","fetchData","fetch","res","json","then","err","overflow","JSON","stringify"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,KAArB,QAAkC,MAAlC;IACQC,M,GAAwBH,K,CAAxBG,M;IAAQC,W,GAAgBJ,K,CAAhBI,W;;AAEhB,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACEP,QAAQ,CAAC,EAAD,CADV;AAAA,MACfQ,IADe;AAAA,MACTC,OADS;;AAAA,mBAEQT,QAAQ,CAAC,KAAD,CAFhB;AAAA,MAEfU,QAFe;AAAA,MAELC,SAFK;;AAGtBZ,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCa,SADD;AAAA;AAAA;;AAAA;AAAA,4EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBC,KAAK,CAAC,sCAAD,CADzB;;AAAA;AACQC,gBAAAA,GADR;AAEEA,gBAAAA,GAAG,CACAC,IADH,GAEGC,IAFH,CAEQ,UAACF,GAAD;AAAA,yBAASL,OAAO,CAACK,GAAD,CAAhB;AAAA,iBAFR,WAGS,UAACG,GAAD;AAAA,yBAASN,SAAS,CAACM,GAAD,CAAlB;AAAA,iBAHT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAQdL,IAAAA,SAAS;AACV,GATQ,EASN,EATM,CAAT;AAWA,SACE;AAAK,IAAA,KAAK,EAAE;AAACM,MAAAA,QAAQ,EAAC;AAAV;AAAZ,KACE,oBAAOC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAP,CADF,CADF;AAkDD,CAhED;;GAAMD,S;;KAAAA,S;AAkEN,eAAeA,SAAf;AAEA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space } from \"antd\";\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nconst AllDomain = () => {\r\n  const [data, setData] = useState([]);\r\n  const [hasError, setErrors] = useState(false);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\"http://localhost:5000/api/v1/domain/\");\r\n      res\r\n        .json()\r\n        .then((res) => setData(res))\r\n        .catch((err) => setErrors(err));\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{overflow:\"scroll\"}}>\r\n      <span>{JSON.stringify(data)}</span>\r\n       {/* <Table dataSource={data}>\r\n        <ColumnGroup title=\"Domain Name\">\r\n          <Column title=\"Company\" dataIndex=\"Domain_Name\" key=\"Domain_Name\" />\r\n          <Column title=\"Website\" dataIndex=\"Domain_URL\" key=\"Domain_URL\" />\r\n        </ColumnGroup>\r\n        <Column\r\n          title=\"Status\"\r\n          dataIndex=\"Domain_Status\"\r\n          key=\"Domain_Status\"\r\n          render={(Domain_Status) => (\r\n            <>\r\n              {((tag) => {\r\n                let color = tag.length > 6 ? \"volcano\" : \"green\";\r\n                if (tag === \"loser\") {\r\n                  color = \"blue\";\r\n                }\r\n                return (\r\n                  <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        />\r\n        <Column title=\"Type\" dataIndex=\"address\" key=\"address\" />\r\n        <ColumnGroup title=\"DA | DR\">\r\n          <Column title=\"DA\" dataIndex=\"DA\" key=\"DA\" />\r\n          <Column title=\"DR\" dataIndex=\"DR\" key=\"DR\" />\r\n        </ColumnGroup>\r\n        <Column title=\"Quality\" dataIndex=\"address\" key=\"address\" />\r\n        <Column title=\"Traffic\" dataIndex=\"address\" key=\"address\" />\r\n        <Column title=\"Sample Links\" dataIndex=\"address\" key=\"address\" />\r\n        <Column\r\n          title=\"Action\"\r\n          key=\"action\"\r\n          render={(text, record) => (\r\n            <Space size=\"middle\">\r\n              <a>View</a>\r\n              <a>Edit</a>\r\n              <a>Delete</a>\r\n            </Space>\r\n          )}\r\n        />\r\n      </Table> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllDomain;\r\n\r\n{\r\n  /* <Column\r\n          title=\"Tags\"\r\n          dataIndex=\"tags\"\r\n          key=\"tags\"\r\n          render={(tags) => (\r\n            <>\r\n              {tags.map((tag) => {\r\n                let color = tag.length > 5 ? \"geekblue\" : \"purple\";\r\n                if (tag === \"loser\") {\r\n                  color = \"blue\";\r\n                }\r\n                return (\r\n                  <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        /> */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}