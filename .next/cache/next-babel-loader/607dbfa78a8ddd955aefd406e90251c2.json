{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Table, Tag, Space } from \"antd\";\nconst {\n  Column,\n  ColumnGroup\n} = Table;\n\nconst AllDomain = () => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: hasError,\n    1: setErrors\n  } = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"http://localhost:5000/api/v1/domain/\");\n      res.json().then(res => setData(res)).catch(err => setErrors(err));\n    }\n\n    fetchData();\n  }, []);\n  let color;\n  return __jsx(\"div\", {\n    style: {\n      overflow: \"scroll\"\n    }\n  }, console.log(JSON.stringify(data.map(id => {\n    return id.Domain;\n  }))), __jsx(Table, {\n    dataSource: data\n  }, __jsx(ColumnGroup, {\n    title: \"Domain Name\"\n  }, __jsx(Column, {\n    title: \"Company\",\n    dataIndex: \"Domain_Name\",\n    key: \"Domain_Name\"\n  }), __jsx(Column, {\n    title: \"Website\",\n    dataIndex: \"Domain_URL\",\n    key: \"Domain_URL\"\n  })), __jsx(Column, {\n    title: \"Status\",\n    dataIndex: \"Domain_Status\",\n    key: \"Domain_Status\",\n    render: Domain_Status => __jsx(React.Fragment, null, __jsx(Tag, {\n      color: Domain_Status === \"active\" ? \"green\" : \"red\",\n      key: Domain_Status\n    }, Domain_Status.toUpperCase()))\n  }), __jsx(Column, {\n    title: \"Type\",\n    dataIndex: \"Domain_Link_Type\",\n    key: \"Domain_Link_Type\"\n  }), __jsx(ColumnGroup, {\n    title: \"DA | DR\"\n  }, __jsx(Column, {\n    title: \"DA\",\n    dataIndex: \"Domain_DA\",\n    key: \"Domain_DA\"\n  }), __jsx(Column, {\n    title: \"DR\",\n    dataIndex: \"Domain_DR\",\n    key: \"Domain_DR\"\n  })), __jsx(Column, {\n    title: \"Quality\",\n    dataIndex: \"Domain_Quality\",\n    key: \"Domain_Quality\"\n  }), __jsx(ColumnGroup, {\n    title: \"Traffic\"\n  }, __jsx(Column, {\n    title: \"SEMRush\",\n    dataIndex: \"Domain_SEMRush\",\n    key: \"Domain_SEMRush\"\n  }), __jsx(Column, {\n    title: \"AHRef\",\n    dataIndex: \"Domain_AHRef\",\n    key: \"Domain_AHRef\"\n  })), __jsx(Column, {\n    title: \"Sample Links\",\n    dataIndex: \"Domain_Link_SampleA\",\n    key: \"Domain_Link_SampleA\"\n  }), __jsx(Column, {\n    title: \"Action\",\n    key: \"action\",\n    render: (text, record) => __jsx(Space, {\n      size: \"middle\"\n    }, __jsx(\"a\", null, \"View\"), __jsx(\"a\", null, \"Edit\"), __jsx(\"a\", null, \"Delete\"))\n  })));\n};\n\nexport default AllDomain;\n{\n  /* <Column\r\n          title=\"Tags\"\r\n          dataIndex=\"tags\"\r\n          key=\"tags\"\r\n          render={(tags) => (\r\n            <>\r\n              {tags.map((tag) => {\r\n                let color = tag.length > 5 ? \"geekblue\" : \"purple\";\r\n                if (tag === \"loser\") {\r\n                  color = \"blue\";\r\n                }\r\n                return (\r\n                  <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        /> */\n}","map":{"version":3,"sources":["C:/Users/hp/Desktop/webD course 2020/internship/avanzar/1. Domain Handler/wieldy-v-2.3.0/next-js-jwt-stater-kit/routes/AllDomain/index.js"],"names":["React","useEffect","useState","axios","Table","Tag","Space","Column","ColumnGroup","AllDomain","data","setData","hasError","setErrors","fetchData","res","fetch","json","then","catch","err","color","overflow","console","log","JSON","stringify","map","id","Domain","Domain_Status","toUpperCase","text","record"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space } from \"antd\";\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nconst AllDomain = () => {\r\n  const [data, setData] = useState([]);\r\n  const [hasError, setErrors] = useState(false);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\"http://localhost:5000/api/v1/domain/\");\r\n      res\r\n        .json()\r\n        .then((res) => setData(res))\r\n        .catch((err) => setErrors(err));\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  let color;\r\n  return (\r\n    <div style={{ overflow: \"scroll\" }}>\r\n      {/* <span>{JSON.stringify(data)}</span> */}\r\n      {console.log(JSON.stringify(data.map((id)=>{return id.Domain})))}\r\n      <Table dataSource={data}>\r\n        <ColumnGroup title=\"Domain Name\">\r\n          <Column title=\"Company\" dataIndex=\"Domain_Name\" key=\"Domain_Name\" />\r\n          <Column title=\"Website\" dataIndex=\"Domain_URL\" key=\"Domain_URL\" />\r\n        </ColumnGroup>\r\n        <Column\r\n          title=\"Status\"\r\n          dataIndex=\"Domain_Status\"\r\n          key=\"Domain_Status\"\r\n          render={(Domain_Status) => (\r\n            <>\r\n              <Tag color={Domain_Status === \"active\" ? \"green\" : \"red\"} key={Domain_Status}>\r\n                {Domain_Status.toUpperCase()}\r\n              </Tag>\r\n            </>\r\n          )}\r\n        />\r\n        <Column title=\"Type\" dataIndex=\"Domain_Link_Type\" key=\"Domain_Link_Type\" />\r\n        <ColumnGroup title=\"DA | DR\">\r\n          <Column title=\"DA\" dataIndex=\"Domain_DA\" key=\"Domain_DA\" />\r\n          <Column title=\"DR\" dataIndex=\"Domain_DR\" key=\"Domain_DR\" />\r\n        </ColumnGroup>\r\n        <Column title=\"Quality\" dataIndex=\"Domain_Quality\" key=\"Domain_Quality\" />\r\n        <ColumnGroup title=\"Traffic\">\r\n          <Column title=\"SEMRush\" dataIndex=\"Domain_SEMRush\" key=\"Domain_SEMRush\" />\r\n          <Column title=\"AHRef\" dataIndex=\"Domain_AHRef\" key=\"Domain_AHRef\" />\r\n        </ColumnGroup>\r\n        <Column title=\"Sample Links\" dataIndex=\"Domain_Link_SampleA\" key=\"Domain_Link_SampleA\" />\r\n        <Column\r\n          title=\"Action\"\r\n          key=\"action\"\r\n          render={(text, record) => (\r\n            <Space size=\"middle\">\r\n              <a>View</a>\r\n              <a>Edit</a>\r\n              <a>Delete</a>\r\n            </Space>\r\n          )}\r\n        />\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllDomain;\r\n\r\n{\r\n  /* <Column\r\n          title=\"Tags\"\r\n          dataIndex=\"tags\"\r\n          key=\"tags\"\r\n          render={(tags) => (\r\n            <>\r\n              {tags.map((tag) => {\r\n                let color = tag.length > 5 ? \"geekblue\" : \"purple\";\r\n                if (tag === \"loser\") {\r\n                  color = \"blue\";\r\n                }\r\n                return (\r\n                  <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        /> */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}